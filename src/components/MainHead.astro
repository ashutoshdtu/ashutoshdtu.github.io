---
import "../styles/global.scss";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
	image?: string | undefined;
}

const {
	title = "Ashutosh Mishra: Co-founder VedaLabs and Animosoft | Cloud Architect | Consultant",
	description = "Hello, I'm Ashutosh Mishra. Seasoned Technology Leader, Entrepreneur and Consultant based in New Delhi, India",
	image = "/assets/banner-fb.png?v=1",
} = Astro.props;

// const banner = "/assets/banner.png";
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>{title}</title>
<meta name="description" property="og:description" content={description} />
<meta name="generator" content={Astro.generator} />

<!-- Google / Search Engine Tags -->
<meta itemprop="name" content={title} />
<meta itemprop="description" content={description} />
<meta itemprop="image" content={image} />

<!-- Facebook Meta Tags -->
<meta property="og:url" content="https://ashutoshmishra.net" />
<meta property="og:type" content="website" />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />

<!-- Twitter Meta Tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={image} />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<script is:inline>
// This code is inlined in the head to make dark mode instant & blocking.
const getThemePreference = () => {
	if (
		typeof localStorage !== "undefined" &&
		localStorage.getItem("theme")
	) {
		return localStorage.getItem("theme");
	}
	return window.matchMedia("(prefers-color-scheme: dark)").matches
		? "dark"
		: "light";
};
const isDark = getThemePreference() === "dark";
document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

if (typeof localStorage !== "undefined") {
	// Watch the document element and persist user preference when it changes.
	const observer = new MutationObserver(() => {
		const isDark =
			document.documentElement.classList.contains("theme-dark");
		localStorage.setItem("theme", isDark ? "dark" : "light");
	});
	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ["class"],
	});
}

window.onload = function () {
	var isSafari =
		/constructor/i.test(window.HTMLElement) ||
		(function (p) {
			return p.toString() === "[object SafariRemoteNotification]";
		})(
			!window["safari"] ||
			(typeof safari !== "undefined" && safari.pushNotification)
		);

	if (isSafari) {
		document.body.classList.add("safari-browser");
	}
};

document.addEventListener("DOMContentLoaded", function () {
	var observer = new IntersectionObserver(function (entries) {
		entries.forEach(function (entry) {
			if (entry.isIntersecting) {
				var animationClasses = entry.target.dataset.animation;
				entry.target.classList.add(...animationClasses.split(" "));
				entry.target.style.visibility =
					entry.target.dataset.visibility; // Restore the original visibility
				observer.unobserve(entry.target);
			}
		});
	});

	document
		.querySelectorAll(".animate__animated")
		.forEach(function (element) {
			if (element.classList.contains("animate__noscroll")) {
				return; // Skip this element if it has the 'animate__noscroll' class
			}

			var animationClasses = Array.from(element.classList).filter(
				(cls) =>
					cls.startsWith("animate__") &&
					cls !== "animate__animated"
			);
			element.dataset.animation = animationClasses.join(" ");
			element.classList.remove(...animationClasses);
			element.dataset.visibility = element.style.visibility; // Store the original visibility
			element.style.visibility = "hidden"; // Make the element hidden
			observer.observe(element);
		});
});
</script>
